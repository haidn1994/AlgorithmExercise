/*
 이 문제를 보면서 여러가지 생각이 들었는데, 예전에 내가 풀었던 풀이를 말로 설명해보면 다음과 같다.

 >> 상태변수를 3개(이전항, 현재항, sum) 놓고 해당 항이 짝수인지 아닌지 검사하고(이 때 효과적인 비트검사 방법이 있다. 참고하자.) 맞으면 sum에 더한다.
 아니면 더하지 않고 그냥 넘어가는 방법을 사용한다.

 하지만 분명히 다른 방법이 있을것이라고 생각했서 여러 자료를 찾아보았는데 다음 링크를 참고하면 좋을 것 같다.

 * https://www.acmicpc.net/blog/view/28
 * https://proofwiki.org/wiki/Fibonacci_Number_3n_in_terms_of_Fibonacci_Number_n_and_Lucas_Number_2n

하지만 여기에는 오일러 2번 문제에 대한 직접적인 해결책은 얻을 수 없었다.  
하지만 좋은 아이디어가 떠올랐다.

피보나치 수열의 0번째 항은 짝수이고, 1번째 항은 홀수이다.
그리고 2번째 항부터는 n-2번째 항과 n-1번째 항의 합으로 정의되기 때문에
일정 주기마다 짝수가 등장한다는 사실을 알 수 있다.

홀 + 홀 = 짝수 -> (2n-1) + (2n-1)은 2로 나누어 떨어진다.
홀 + 짝 = 짝 + 홀 = 홀수 -> 2n-1 + 2n = 4n-1은 2로 나누어 떨어지지 않는다.
짝 + 짝 = 짝수 -> 2n + 2n = 4n은 2로 나누어 떨어진다.

피보나치 수열에서는 짝-짝인 항은 연속해서 등장하지 않지만 홀수인 항과 홀수인 항이 0항을 포함해서 3n-1번째항과 3n-2번째 항에서 등장한다는 사실을 알 수 있다. 

이 사실에 착안해서 식을 더 정리하면 O(1)의 알고리즘을 얻을수도 있지만 그대로 반복문으로 옮겨도 보다 아름다운 알고리즘을 만들게 될 것이다.

이에 대한 구현은 다음 시간에 해보도록 하겠다.
 */
