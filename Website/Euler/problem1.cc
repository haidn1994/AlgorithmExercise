/*
 1번 문제는 크게 2가지 방법으로 풀 수 있다.

 1. 루프를 사용해서 컴퓨터에게 모든 계산을 맡기는 방법.
 시간 복잡도는 O(n)이 나온다.

 2. 수학을 사용해서 최적화 하는 방법. 이 방법을 사용하면 손으로도 빠르게 답을 구할 수 있다. 시간 복잡도는 O(1)이 나온다.
 필요한 수학적 내용은 다음과 같다.

 2-1. 등차수열의 합 공식
 2-2. 최소공배수(3의 배수와 5의 배수중에서 겹치는 수를 찾아 빼주기 위함)
 2-3. 포함 배제의 원리
 */

#include <iostream>
using namespace std;

// 1번 문제를 루프로 푸는 함수

int loop_sol(void)
{
	int i;
	int sum = 0;
	
	for(i = 1; i < 1000; i++)
		if(i%3 == 0 || i%5 == 0)
			sum += i;
	
	return sum;
}

// 1번 문제를 수학으로 최적화 하여 푸는 함수
// 등차수열의 합을 구하는 공식, 포함 배제의 원리가 사용됐다.
// 루프를 사용하지 않기 때문에 시간 복잡도는 O(1)

// 다음 두 링크를 참조하라.
// 등차수열의 합: http://mathbang.net/609
// 포함 배제의 원리: http://j1w2k3.tistory.com/987

int sol(void)
{
	// 1000 미만이므로 999까지로 범위를 설정해야 한다.
	int sum_of_mult3 = ((999/3)*(3 + 3*(999/3)))/2;
	int sum_of_mult5 = ((999/5)*(5 + 5*(999/5)))/2;
	// 두 수의 최소공배수를 빼줘야 한다. 포함 배제 원리가 비로소 완성된다.
	int sum_of_mult15 = ((999/15)*(15 + 15*(999/15)))/2;

	return sum_of_mult3 + sum_of_mult5 - sum_of_mult15;
}

int main(void)
{
	cout << "1번 반복문 솔루션의 답: " << loop_sol() << '\n';
	cout << "2번 솔루션의 답 : " << sol() << '\n';
	
	return 0;
}


